// TODO - learn headers for globals...

/* DEPENDS ON:
 *  ajax
 *  modelplus.url
 */

/**
 * The ModelPlus variables and functions are being moved to this namespace to avoid clutering the global namespace.
 * All functions return the Promise generated by JQuery AJAX getJSON/post calls.
 * @namespace
 */
var modelplus = modelplus || {};

(function () {
  "use strict";
  
  var api_url = modelplus.url.proxy + modelplus.url.api;
  
  modelplus.api = modelplus.api || {};
  
  // 
  modelplus.api.get_forcing_options = function(forcing_id, timestamp_ini, timestamp_end){
    var ws_url;
    ws_url = api_url + "forcing_sources";
    ws_url += "%i%from_type=" + forcing_id;
	ws_url += "%e%timestamp_ini=" + timestamp_ini;
	ws_url += "%e%timestamp_end=" + timestamp_end;
	return ($.getJSON(ws_url));
  }
  
  // 
  // hlm_id : expected values such as 190, 254, ...
  // references_ids : array of reference ids
  modelplus.api.get_evaluations_for_hlm = function(hlm_id, references_ids){
    var ws_url;
    ws_url = api_url + 'sc_evaluations%i%for_hlmodel=' + hlm_id;
	ws_url += '%e%from_references=' + (references_ids.join(","));
	return ($.getJSON(ws_url + ws_url));
  }
  
  // Retrieves all representations that can be obtained from an hlm model
  // hlm_id : expected values such as 190, 254, ...
  modelplus.api.get_representations_for_hlm = function(hlm_id){
    var ws_url;
	ws_url = api_url + "sc_representations";
    ws_url += '%i%from_hlmodel=' + hlm_id;
	return ($.getJSON(ws_url));
  }
  
  // Retrieves all common representations for two hlm models
  // hlm_id_1 : expected values such as 190, 254, ...
  // hlm_id_2 : expected values such as 190, 254, ...
  modelplus.api.get_common_representations_for_hlms = function(hlm_id_1, hlm_id_2){
    var ws_url;
	ws_url = api_url + "sc_representations";
    ws_url += '%i%from_hlmodel=' + hlm_id_1;
	ws_url += '%e%from_hlmodel_compareto=' + hlm_id_2;
	return ($.getJSON(ws_url));
  }
  
  // Tries to reserve a runset id
  modelplus.api.reserve_runset_id = function(runset_id){
    var post_url;
    post_url = api_url + "sc_runset_results";
    return($.post(post_url, {"runset_id": runset_id}));
  }
  
  // Retrieves a Runset id that can be used for new Runsets
  modelplus.api.get_auto_runset_id = function(){
	var get_url;
	get_url = api_url + "sc_runsets";
	get_url += "%i%do=get_new_runset_id";
	
    return(
	  $.get(get_url)
	    .then(function(data){
          const PREFIX = "rset";
          var parsed_data, max_num_str, max_num_int, max_num_cnt;
          parsed_data = JSON.parse(data);
		  parsed_data = parsed_data["runset_id"];
		  max_num_str = parsed_data.replace(PREFIX, "");
		  max_num_cnt = max_num_str.length;
		  max_num_int = parseInt(max_num_str) + 1;
		  max_num_str = max_num_int.toString();
		  //console.log("Adding until " + max_num_str.length + " < " + max_num_cnt + ".");
		  while(max_num_str.length < max_num_cnt){
            max_num_str = "0" + max_num_str;
          }
          return (PREFIX + max_num_str);
        }));
  }
  
  // Submit a request for new runset
  // post_dictionary : expects dictionary with 'runset_name', 'timestamp_ini', 'reference_ids', ... keys
  modelplus.api.request_new_runset = function(post_dictionary){
    var ws_url;
	ws_url = api_url + "sc_runset_requests/new";
	return ($.post(ws_url, post_dictionary));
  }

})();